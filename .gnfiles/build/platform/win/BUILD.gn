#
# Copyright Â© 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//.gnfiles/build/toolchain/msvc/msvc.gni")

declare_args() {
  use_unicode_char = true
  use_lean_and_mean_header = true
}

# Basic Compilation Configuration.
config("specific") {
  cflags = [
    "/Gy",  # Enable function-level linking.
    "/FS",  # Preserve previous PDB behavior.
    "/bigobj",  # Some of our files are bigger than the regular limits.
    "/Zi",
  ]

  # Force C/C++ mode for the given GN detected file type. This is necessary
  # for precompiled headers where the same source file is compiled in both
  # modes.
  cflags_c = [ "/TC" ]
  cflags_cc = [ "/TP" ]

  cflags += [
    # Tell the compiler to crash on failures. This is undocumented
    # and unsupported but very handy.
    "/d2FastFail",

    # Work around crbug.com/526851, bug in VS 2015 RTM compiler.
    "/Zc:sizedDealloc-",
  ]

  if (is_clang) {
    if (target_cpu == "x86") {
      cflags += [ "-m32" ]
    } else if (target_cpu == "x64") {
      cflags += [ "-m64" ]
    } else if (target_cpu == "arm64") {
      cflags += [ "--target=arm64-windows" ]
    }
  } else {
    # Fix msvc doesnt expand __VA_ARGS__ correctly
    # https://stackoverflow.com/questions/5134523/msvc-doesnt-expand-va-args-correctly
    cflags += [ "/Zc:preprocessor" ]
  }

  defines = []
  if (use_unicode_char) {
    defines += [
      "_UNICODE",
      "UNICODE",
    ]
  }
  if (use_lean_and_mean_header) {
    defines += [ "WIN32_LEAN_AND_MEAN" ]
  }

  configs = [ ":specific_cpp" ]
}

# Compilation configurations relevant to the C++.
config("specific_cpp") {
  cflags_cc = []
  if (enable_cxx_exception) {
    cflags_cc += [ "/EHsc" ]
  }
}

if (host_os == "win") {
  environment_file = rebase_path("${root_out_dir}/environment.${target_cpu}")
  exec_script("//.gnfiles/build/scripts/setup_vs.py",
              [
                "$vs_version",
                "$host_cpu",
                "$target_cpu",
                environment_file,
              ],
              "list lines")

  if (is_clang) {
    msvc_toolchain("clang") {
      environment = environment_file
      use_clang = true
    }
  } else {
    msvc_toolchain("msvc") {
      environment = environment_file
      use_clang = false
    }
  }
}

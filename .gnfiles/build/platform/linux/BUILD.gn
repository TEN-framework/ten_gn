#
# Copyright Â© 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//.gnfiles/build/toolchain/gcc/gcc.gni")
import("feature.gni")

# Basic Compilation Configuration.
config("specific") {
  cflags = []
  if (!is_debug) {
    cflags += [
      "-ffunction-sections",
      "-fdata-sections",
      "-fno-ident",
    ]
  }

  ldflags = []
  if (!is_debug) {
    ldflags += [
      "-Wl,-O2",
      "-Wl,--gc-sections",
    ]
  }

  # In order to enable one toolchain setting to build both C and C++ codes, the
  # linker set by the toolchain is the C++ linker (i.e., g++ or clang++), but
  # the most basic compilation configuration of TEN world does not require the
  # inclusion of the C++ standard libraries, it is necessary to prevent the C++
  # linker from actively linking those C++ standard libraries.
  libs = []
  if (is_clang) {
    # clang supports this wonderful command line option to exclude the standard
    # C++ libraries only.
    ldflags += [ "-nostdlib++" ]
  } else {
    # GCC only supports `-nostdlib` from version 13 onwards, so for
    # compatibility, we use `-nodefaultlibs` here, but this removes even the
    # most basic libraries. Therefore, below we add back those libraries that
    # are unrelated to the C++ standard library.
    ldflags += [ "-nodefaultlibs" ]

    libs += [
      "m",
      "c",
      "gcc",
      "gcc_s",
      "pthread",
    ]
  }

  asmflags = cflags

  configs = [ ":specific_cpp" ]
}

# Compilation configurations relevant to the C++.
config("specific_cpp") {
  cflags = []
  ldflags = []
  cflags_cc = []

  if (is_clang) {
    # In clang, we use its libc++ standard library.
    cflags_cc += [ "-stdlib=lib${linux_clang_stdlib}" ]
    ldflags += [ "-stdlib=lib${linux_clang_stdlib}" ]
  }

  if (enable_cxx_rtti) {
    cflags_cc += [ "-frtti" ]
  } else {
    cflags_cc += [ "-fno-rtti" ]
  }

  if (enable_cxx_exception) {
    cflags_cc += [ "-fexceptions" ]
  } else {
    cflags_cc += [ "-fno-exceptions" ]
  }

  libs = []

  if (is_clang) {
    if (linux_clang_stdlib == "c++") {
      if (linux_stl_static) {
        libs += [ "/usr/lib/x86_64-linux-gnu/libc++.a" ]
      } else {
        libs += [ "c++" ]
      }
    } else if (linux_clang_stdlib == "stdc++") {
      if (linux_stl_static) {
        _gcc_version =
            exec_script("//.gnfiles/build/scripts/get_gcc_version.py",
                        [ "gcc" ],
                        "value")
        assert(_gcc_version == 0 || _gcc_version != 0)
        libs += [ "/usr/lib/gcc/x86_64-linux-gnu/${_gcc_version}/libstdc++.a" ]
      } else {
        libs += [ "stdc++" ]
      }
    } else {
      assert(0, "Unsupported linux_clang_stdlib value.")
    }
  } else {
    if (linux_stl_static) {
      _gcc_version = exec_script("//.gnfiles/build/scripts/get_gcc_version.py",
                                 [ "gcc" ],
                                 "value")
      assert(_gcc_version == 0 || _gcc_version != 0)
      libs += [ "/usr/lib/gcc/x86_64-linux-gnu/${_gcc_version}/libstdc++.a" ]
    } else {
      libs += [ "stdc++" ]
    }
  }
}

if (is_clang) {
  gcc_toolchain("clang") {
    cc = "clang"
    cxx = "clang++"
    objcopy = "objcopy"
    strip = "strip"
    ld = cxx
  }
} else {
  gcc_toolchain("gcc") {
    cc = "gcc"
    cxx = "g++"
    objcopy = "objcopy"
    strip = "strip"
    ld = cxx

    if (enable_sanitizer) {
      # ASan runtime must come first in the library list.
      inputs_section_prefix = "-lasan"
    }
  }
}

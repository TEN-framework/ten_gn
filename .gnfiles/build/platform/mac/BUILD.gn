#
# Copyright Â© 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//.gnfiles/build/feature/apple.gni")
import("//.gnfiles/build/toolchain/gcc/gcc.gni")

declare_args() {
  enable_arc = true
}

# Basic Compilation Configuration.
config("specific") {
  cflags = [ "-Wno-format" ]
  cflags_objc = []
  cflags_objcc = [ "-fobjc-call-cxx-cdtors" ]
  cflags_cc = []

  ldflags = []
  libs = [ "System" ]

  asmflags = []

  common_mac_flags = [ "--target=$xcode_target_platform" ]
  cflags += common_mac_flags
  ldflags += common_mac_flags
  asmflags += common_mac_flags

  cflags += [
    "-ffunction-sections",
    "-fdata-sections",
    "-fno-ident",
  ]

  ldflags += [
    "-Xlinker",
    "-dead_strip",
  ]

  if (enable_arc) {
    cflags_objc += [ "-fobjc-arc" ]
    cflags_objcc += [ "-fobjc-arc" ]
  }

  # Because the linker set by the toolchain is the C++ linker, but the most
  # basic compilation configuration does not require the inclusion of C++, it is
  # necessary to prevent the C++ linker from actively linking those C++ standard
  # libraries.
  if (is_clang) {
    ldflags += [ "-nostdlib++" ]
  } else {
    assert(0, "Only support clang in mac.")
  }

  configs = [ ":specific_cpp" ]
}

# Compilation configurations relevant to the C++.
config("specific_cpp") {
  cflags_cc = []

  if (enable_cxx_rtti) {
    cflags_cc += [ "-frtti" ]
  } else {
    cflags_cc += [ "-fno-rtti" ]
  }

  if (enable_cxx_exception) {
    cflags_cc += [ "-fexceptions" ]
  } else {
    cflags_cc += [ "-fno-exceptions" ]
  }

  libs = []
  if (is_clang) {
    libs += [ "c++" ]
  } else {
    assert(0, "Only support clang in mac.")
  }
}

config("mac_dynamic_flags") {
  ldflags = [
    # Always load Objective-C categories and classes.
    "-Wl,-ObjC",

    # Add swift support anyway, even not used
    "-Wl,-rpath,/usr/lib/swift",

    # Then current path
    "-Wl,-rpath,@loader_path/.",
  ]
}

if (is_clang) {
  gcc_toolchain("clang") {
    cc = "clang"
    cxx = "clang++"
    ld = cxx
  }
} else {
  gcc_toolchain("gcc") {
    cc = "gcc"
    cxx = "g++"
    ld = cxx
  }
}

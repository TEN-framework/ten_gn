#
# Copyright © 2025 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//.gnfiles/build/feature/base_options.gni")

template("ten_package") {
  _target_name = target_name

  # Determine if package_output_root_dir is needed.
  should_set_package_output_root_dir = false
  if (defined(invoker.enable_build) && invoker.enable_build) {
    should_set_package_output_root_dir = true
  }
  if (defined(invoker.resources) && invoker.resources != []) {
    should_set_package_output_root_dir = true
  }

  if (should_set_package_output_root_dir) {
    package_output_root_dir_name = _target_name
    if (defined(invoker.package_output_root_dir_name) &&
        invoker.package_output_root_dir_name != "") {
      package_output_root_dir_name = invoker.package_output_root_dir_name
    }

    # Determine the package_output_root_dir of the TEN package.
    #
    # The main purpose of this is to quickly find the desired package in the out
    # folder without making the out folder too cluttered. And different types of
    # packages can have the same name, so splitting sub-folders based on type to
    # create a namespace-like effect is also relatively appropriate.
    if (invoker.package_kind == "app") {
      package_output_root_dir =
          "${root_out_dir}/app/${package_output_root_dir_name}"
    } else if (invoker.package_kind == "protocol") {
      package_output_root_dir = "${root_out_dir}/ten_packages/protocol/${package_output_root_dir_name}"
    } else if (invoker.package_kind == "addon_loader") {
      package_output_root_dir = "${root_out_dir}/ten_packages/addon_loader/${package_output_root_dir_name}"
    } else if (invoker.package_kind == "extension") {
      package_output_root_dir = "${root_out_dir}/ten_packages/extension/${package_output_root_dir_name}"
    } else if (invoker.package_kind == "system") {
      package_output_root_dir =
          "${root_out_dir}/ten_packages/system/${package_output_root_dir_name}"
    } else if (invoker.package_kind == "custom") {
      package_output_root_dir =
          "${root_out_dir}/${package_output_root_dir_name}"
    }
  }

  # In the `ten_package` template, those internal gn targets used to create the
  # package need to be detectable by the outside targets if they are rebuilt.
  # This ensures that other targets dependent on the `ten_package` targets can
  # also be rebuilt as a result. Therefore, it is necessary to collect these
  # internal targets and expose them via `public_deps` in the end.
  package_deps = []

  # Check if we need to build the package.
  if (defined(invoker.enable_build) && invoker.enable_build == true) {
    # Ensure package_output_root_dir is defined before using it.
    if (!should_set_package_output_root_dir) {
      error("package_output_root_dir must be set when enable_build is true.")
    }

    if (invoker.package_kind == "app") {
      build_type = "executable"
    } else if (invoker.package_kind == "protocol" ||
               invoker.package_kind == "addon_loader" ||
               invoker.package_kind == "extension" ||
               invoker.package_kind == "system") {
      build_type = "shared_library"
    }

    build_output_name = _target_name
    if (defined(invoker.output_name) && invoker.output_name != "") {
      build_output_name = invoker.output_name
    }

    if (build_type == "shared_library") {
      output_dir_related_to_package_output_root_dir = "lib"

      if (is_linux) {
        real_build_output_file_name = "lib${build_output_name}.so"
      } else if (is_mac) {
        real_build_output_file_name = "lib${build_output_name}.dylib"
      } else if (is_win) {
        real_build_output_file_name = "${build_output_name}.dll"
      }
    } else {
      output_dir_related_to_package_output_root_dir = "bin"

      if (is_linux || is_mac) {
        real_build_output_file_name = "${build_output_name}"
      } else if (is_win) {
        real_build_output_file_name = "${build_output_name}.exe"
      }
    }
    build_output_dir = "${package_output_root_dir}/${output_dir_related_to_package_output_root_dir}"

    unique_build_target_name = "${_target_name}_${build_type}"
    target(build_type, unique_build_target_name) {
      output_name = "${build_output_name}"
      output_dir = "${build_output_dir}"

      sources = []
      if (defined(invoker.sources) && invoker.sources != []) {
        sources += invoker.sources
      }
      if (defined(invoker.configs) && invoker.configs != []) {
        configs += invoker.configs
      }
      defines = common_defines
      if (defined(invoker.defines) && invoker.defines != []) {
        defines += invoker.defines
      }
      include_dirs = common_includes
      if (defined(invoker.include_dirs) && invoker.include_dirs != []) {
        include_dirs += invoker.include_dirs
      }
      cflags = common_cflags
      if (defined(invoker.cflags) && invoker.cflags != []) {
        cflags += invoker.cflags
      }
      cflags_c = common_cflags_c
      if (defined(invoker.cflags_c) && invoker.cflags_c != []) {
        cflags_c += invoker.cflags_c
      }
      cflags_cc = common_cflags_cc
      if (defined(invoker.cflags_cc) && invoker.cflags_cc != []) {
        cflags_cc += invoker.cflags_cc
      }
      cflags_objc = common_cflags_objc
      if (defined(invoker.cflags_objc) && invoker.cflags_objc != []) {
        cflags_objc += invoker.cflags_objc
      }
      cflags_objcc = common_cflags_objcc
      if (defined(invoker.cflags_objcc) && invoker.cflags_objcc != []) {
        cflags_objcc += invoker.cflags_objcc
      }
      libs = common_libs
      if (defined(invoker.libs) && invoker.libs != []) {
        libs += invoker.libs
      }
      lib_dirs = common_lib_dirs
      if (defined(invoker.lib_dirs) && invoker.lib_dirs != []) {
        lib_dirs += invoker.lib_dirs
      }
      ldflags = common_ldflags
      if (defined(invoker.ldflags) && invoker.ldflags != []) {
        ldflags += invoker.ldflags
      }

      # Setup the shared library search path.
      if (is_linux) {
        ldflags += [
          # Enable the binary to look in the same folder for shared libraries.
          "-Wl,-rpath=\$ORIGIN",

          # Enable the binary to look in '<parent_folder>/lib/' for shared
          # libraries.
          "-Wl,-rpath=\$ORIGIN/../lib/",
        ]
      } else if (is_mac) {
        ldflags += [
          # Enable the binary to look in the same folder for shared libraries.
          "-Wl,-rpath,@loader_path",

          # Enable the binary to look in '<parent_folder>/lib/' for shared
          # libraries.
          "-Wl,-rpath,@loader_path/../lib/",

          "-Xlinker",
          "-install_name",
          "-Xlinker",
          "@rpath/lib${_target_name}.dylib",
        ]
      }

      # Setup relevant variables for the installed system package.
      if (invoker.package_kind == "app") {
        app_base_dir = get_path_info(_target_name, "dir")

        used_system_pkgs = exec_script(
                "//.gnfiles/build/scripts/get_dependent_and_buildable_pkgs.py",
                [
                  "--pkg-base-dir",
                  rebase_path("${app_base_dir}"),
                  "--app-base-dir",
                  rebase_path("${app_base_dir}"),
                  "--pkg-type",
                  "system",
                ],
                "list lines")

        foreach(used_pkg, used_system_pkgs) {
          configs += [ "${used_pkg}:config_for_app" ]
        }
      } else {
        pkg_base_dir = get_path_info(_target_name, "dir")
        app_base_dir = "${pkg_base_dir}/../../../"

        used_system_pkgs = exec_script(
                "//.gnfiles/build/scripts/get_dependent_and_buildable_pkgs.py",
                [
                  "--pkg-base-dir",
                  rebase_path("${pkg_base_dir}"),
                  "--app-base-dir",
                  rebase_path("${app_base_dir}"),
                  "--pkg-type",
                  "system",
                ],
                "list lines")

        foreach(used_pkg, used_system_pkgs) {
          configs += [ "${app_base_dir}${used_pkg}:config_for_ten_packages" ]
        }
      }

      forward_variables_from(invoker,
                             [
                               "public_deps",
                               "deps",
                             ])
    }

    # Copy the build results to the final destination.
    unique_copy_build_result_target_name = "${_target_name}_copy_build_result"
    unique_copy_build_result_tg_timestamp_proxy_file =
        "${target_gen_dir}/${unique_copy_build_result_target_name}"

    action("${unique_copy_build_result_target_name}") {
      script = "//.gnfiles/build/scripts/copy_fs_entry.py"

      inputs = [ "${build_output_dir}/${real_build_output_file_name}" ]
      outputs = [ unique_copy_build_result_tg_timestamp_proxy_file ]

      target_dir = get_label_info(":${unique_build_target_name}", "dir")

      args = [
        "--source",
        rebase_path("${build_output_dir}/${real_build_output_file_name}"),
        "--destination",
        rebase_path(
            "${target_dir}/${output_dir_related_to_package_output_root_dir}/${real_build_output_file_name}"),
        "--tg-timestamp-proxy-file",
        rebase_path(unique_copy_build_result_tg_timestamp_proxy_file),
        "--files-only",
      ]

      deps = [ ":${unique_build_target_name}" ]
    }

    # If this action is rebuilt, it means the final build result may have been
    # modified. Other targets that depend on this `ten_package` need to be aware
    # of this, so it is added to `package_deps`.
    package_deps += [ ":${unique_copy_build_result_target_name}" ]
  }

  # Handle resources
  #
  # The basic function of resources is simply to copy — copying from specified
  # sources to specified destinations. All the destination folders of
  # 'resources' are based on <package_output_root_dir>.
  if (defined(invoker.resources) && invoker.resources != []) {
    # Ensure package_output_root_dir is defined before using it.
    if (!should_set_package_output_root_dir) {
      error("package_output_root_dir must be set when resources are defined.")
    }

    resource_index = 0

    foreach(resource, invoker.resources) {
      resource_info = {
      }

      resource_info =
          exec_script("//.gnfiles/build/scripts/get_src_and_dest_file.py",
                      [
                        "--input-string",
                        "${resource}",
                        "--src-dest-delimiter",
                        "=>",
                      ],
                      "json")

      resource_src_path = resource_info.source
      resource_dest_path = resource_info.destination

      unique_resource_action_target_name =
          "${_target_name}_resource_${resource_index}"

      # The only task handled by resources is copying.
      action("${unique_resource_action_target_name}") {
        script = "//.gnfiles/build/scripts/copy_fs_entry.py"

        resource_output_path =
            "${package_output_root_dir}/${resource_dest_path}"

        inputs = [ resource_src_path ]
        outputs = [ resource_output_path ]

        args = [
          "--source",
          rebase_path(resource_src_path),
          "--destination",
          rebase_path(resource_output_path),
          "--files-only",
        ]

        forward_variables_from(invoker,
                               [
                                 "deps",
                                 "public_deps",
                               ])
      }

      # If this action is rebuilt, it means that the resources ultimately
      # packaged into this `ten_package` might have been modified. Other targets
      # outside that depend on this `ten_package` need to be aware of this, so
      # it should be included in `package_deps`.
      package_deps += [ ":${unique_resource_action_target_name}" ]

      resource_index += 1
    }
  }

  # Build the installed buildable addons in TEN app, and copy it to the out
  # folder.
  #
  # If we are compiling a TEN app, the behavior includes not only compiling the
  # app itself but also compiling the installed buildable addons within the app.
  # Specifically, if an addon contains a BUILD.gn file (indicating that it is a
  # C++ addon), it will be compiled together with the app.
  #
  # In other words, a C++ addon can be built standalone or compiled as part of
  # an app. The BUILD.gn file for a C++ addon is specifically adapted for these
  # two scenarios.
  if (invoker.package_kind == "app") {
    app_base_dir = rebase_path(get_path_info(_target_name, "dir"))

    dependent_and_buildable_pkgs =
        exec_script(
            "//.gnfiles/build/scripts/get_dependent_and_buildable_pkgs.py",
            [
              "--pkg-base-dir",
              "${app_base_dir}",
              "--app-base-dir",
              "${app_base_dir}",
              "--pkg-type",
              "extension",
              "--pkg-type",
              "protocol",
              "--pkg-type",
              "addon_loader",
            ],
            "list lines")

    foreach(dependent_and_buildable_pkg, dependent_and_buildable_pkgs) {
      # The addition of the following deps will cause the app's building process
      # to also build the dependent and buildable C++ addons.
      package_deps += [ "${dependent_and_buildable_pkg}" ]
    }
  }

  group(_target_name) {
    if (defined(public_deps)) {
      public_deps += package_deps
    } else {
      public_deps = package_deps
    }
  }
}

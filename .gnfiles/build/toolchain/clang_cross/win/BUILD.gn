#
# Copyright Â© 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
if (host_os == "mac") {
  cc = "/usr/local/Cellar/llvm/11.0.0/bin/clang-cl"
  cxx = "/usr/local/Cellar/llvm/11.0.0/bin/clang-cl"
  ar = "/usr/local/Cellar/llvm/11.0.0/bin/llvm-lib"
  ld = "/usr/local/Cellar/llvm/11.0.0/bin/clang++"
} else {
  cc = "clang-cl"
  cxx = "clang-cl"
  ar = "llvm-lib"
  ld = "clang++"
}

toolchain("clang") {
  object_subdir = "{{target_out_dir}}/{{label_name}}"

  tool("cc") {
    depfile = "{{output}}.d"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
    command = "$cc /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}} /Fd\"$pdbname\""
    depsformat = "msvc"
    description = "CC  {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]
  }

  tool("cxx") {
    depfile = "{{output}}.d"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
    command = "$cxx /nologo /showIncludes {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}} /Fd\"$pdbname\""
    depsformat = "msvc"
    description = "CC  {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]
  }

  tool("asm") {
    # For GCC we can just use the C compiler to compile assembly.
    depfile = "{{output}}.d"
    pdbname = "{{target_out_dir}}/{{label_name}}_c.pdb"
    command = "$cc /nologo /showIncludes {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}} /Fd\"$pdbname\""
    depsformat = "msvc"
    description = "CC  {{output}}"
    outputs = [ "$object_subdir/{{source_name_part}}.obj" ]
  }

  tool("alink") {
    rspfile = "{{output}}.rsp"
    rspfile_content = "{{inputs}}"

    rspfile_content = "{{inputs}}"

    command = "rm -f \"{{output}}\" && $ar {{arflags}} rcs \"{{output}}\" @\"$rspfile\""

    description = "AR  {{output}}"
    outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]

    # Shared libraries go in the target out directory by default so we can
    # generate different targets with the same name and not have them collide.
    default_output_dir = "{{target_out_dir}}"
    default_output_extension = ".a"
    output_prefix = "lib"
  }

  tool("solink") {
    soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
    sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
    rspfile = sofile + ".rsp"
    pool = "//.gnfiles/build/toolchain:link_pool"
    command = "$ld -shared {{ldflags}} -o \"{{output}}\" -Wl,-soname=\"$soname\" @\"$rspfile\""
    rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl, {{libs}}"
    lib_switch = "-l"
    lib_dir_switch = "-L"
    description = "LD  {{output}}"

    default_output_extension = ".dll"

    default_output_dir = "{{root_out_dir}}"
    output_prefix = ""
    restat = true

    # Tell GN about the output files. It will link to the sofile but use the
    # tocfile for dependency management.
    outputs = [ sofile ]
  }

  tool("solink_module") {
    soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
    sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
    rspfile = sofile + ".rsp"
    pool = "//.gnfiles/build/toolchain:link_pool"
    command = "$ld -shared {{ldflags}} -o \"{{output}}\" -Wl,-soname=\"$soname\" @\"$rspfile\""
    rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl, {{libs}}"
    lib_switch = "-l"
    lib_dir_switch = "-L"
    description = "LD  {{output}}"

    default_output_extension = ".dll"

    default_output_dir = "{{root_out_dir}}"
    output_prefix = ""
    restat = true

    # Tell GN about the output files. It will link to the sofile but use the
    # tocfile for dependency management.
    outputs = [ sofile ]
  }

  tool("link") {
    exename = "{{target_output_name}}{{output_extension}}"
    outfile = "{{output_dir}}/$exename"
    rspfile = "$outfile.rsp"
    pool = "//.gnfiles/build/toolchain:link_pool"
    default_output_extension = ""
    lib_switch = "-l"
    lib_dir_switch = "-L"
    default_output_dir = "{{root_out_dir}}"

    command = "$ld {{ldflags}} -o \"{{output}}\" @\"$rspfile\""
    rspfile_content = "{{solibs}} -Wl, {{libs}} {{inputs}}"

    description = "LD  {{output}}"
    outputs = [ outfile ]
  }

  # These two are really entirely generic, but have to be repeated in
  # each toolchain because GN doesn't allow a template to be used here.
  # See //build/toolchain/toolchain.gni for details.
  tool("stamp") {
    command = "touch \"{{output}}\""
    description = "GEN {{output}}"
  }
  tool("copy") {
    command = "cp -rf {{source}} {{output}}"
    description = "CP  {{source}} {{output}}"
  }

  tool("action") {
    pool = "//.gnfiles/build/toolchain:action_pool"
    description = "CC  {{output}}"
  }
}

config("cross") {
  toolchain_path = getenv("HOME") + "/Windows/toolchain"
  cflags = [
    "-fms-compatibility",
    "-fms-compatibility-version=19",
    "-fms-extensions",
    "-Wno-msvc-not-found",
    "-DWIN32",
    "-D_WIN32",
    "-D_MT",
    "-D_DLL",
    "-Xclang",
    "-disable-llvm-verifier",
    "-Xclang",
    "--dependent-lib=msvcrt",
    "-Xclang",
    "--dependent-lib=ucrt",
    "-Xclang",
    "--dependent-lib=oldnames",
    "-Xclang",
    "--dependent-lib=vcruntime",
    "-D_CRT_SECURE_NO_WARNINGS",
    "-D_CRT_NONSTDC_NO_DEPRECATE",
    "-D_WINSOCK_DEPRECATED_NO_WARNINGS",
    "-U__GNUC__",
    "-U__gnu_linux__",
    "-U__GNUC_MINOR__",
    "-U__GNUC_PATCHLEVEL__",
    "-U__GNUC_STDC_INLINE__",
    "-I$toolchain_path/VS/2019/Community/VC/Tools/MSVC/14.28.29333/include",
    "-I$toolchain_path/SDK/Include/10.0.17134.0/um",
    "-I$toolchain_path/SDK/Include/10.0.17134.0/ucrt",
    "-I$toolchain_path/SDK/Include/10.0.17134.0/shared",
    "-I$toolchain_path/SDK/Include/10.0.17134.0/winrt",
    "-I$toolchain_path/SDK/Include/10.0.17134.0/cppwinrt",
    "-Wno-expansion-to-defined",
    "-Wno-pragma-pack",
    "-Wno-nonportable-include-path",
    "-Wno-microsoft-anon-tag",
    "-Wno-ignored-attributes",
    "-Wno-ignored-pragma-intrinsic",
    "-Wno-extra-tokens",
  ]
  if (target_cpu == "x86") {
    cflags += [ "-m32" ]
  } else if (target_cpu == "x64") {
    cflags += [ "-m64" ]
  } else if (target_cpu == "arm64") {
    cflags += [ "--target=arm64-windows" ]
  }

  ldflags = [
    "-fuse-ld=lld",
    "-target",
    "i686-pc-win32",
    "-Wl,-machine:$target_cpu",
    "-fmsc-version=1928",
    "-L$toolchain_path/VS/2019/Community/VC/Tools/MSVC/14.28.29333/lib/$target_cpu",
    "-L$toolchain_path/SDK/Lib/10.0.17134.0/um/$target_cpu",
    "-L$toolchain_path/SDK/Lib/10.0.17134.0/ucrt/$target_cpu",
    "-nostdlib",
    "-lmsvcrt",
    "-Wno-msvc-not-found",
  ]
}

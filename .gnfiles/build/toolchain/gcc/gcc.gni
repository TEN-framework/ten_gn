#
# Copyright Â© 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
template("gcc_toolchain") {
  cc = "gcc"
  if (defined(invoker.cc)) {
    cc = invoker.cc
  }

  cxx = "g++"
  if (defined(invoker.cxx)) {
    cxx = invoker.cxx
  }

  if (defined(invoker.ld)) {
    ld = invoker.ld
  } else {
    ld = cxx
  }

  strip = "strip"
  if (defined(invoker.strip)) {
    strip = invoker.strip
  }

  objcopy = "objcopy"
  if (defined(invoker.objcopy)) {
    objcopy = invoker.objcopy
  }

  assert(objcopy == "" || objcopy != "")

  if (!is_mac) {
    ar = "ar"
    if (defined(invoker.ar)) {
      ar = invoker.ar
    }

    if (defined(invoker.solink_libs_section_prefix)) {
      solink_libs_section_prefix = invoker.solink_libs_section_prefix
    } else {
      solink_libs_section_prefix = ""
    }

    if (defined(invoker.solink_libs_section_postfix)) {
      solink_libs_section_postfix = invoker.solink_libs_section_postfix
    } else {
      solink_libs_section_postfix = ""
    }

    if (defined(invoker.inputs_section_prefix)) {
      inputs_section_prefix = invoker.inputs_section_prefix
    } else {
      inputs_section_prefix = ""
    }

    if (defined(invoker.libs_section_prefix)) {
      libs_section_prefix = invoker.libs_section_prefix
    } else {
      libs_section_prefix = ""
    }

    if (defined(invoker.libs_section_postfix)) {
      libs_section_postfix = invoker.libs_section_postfix
    } else {
      libs_section_postfix = ""
    }
  }

  strip_command = ""
  if (is_mac) {
    strip_command = " && cp {{output}} {{output}}.sym && $strip -X -S {{output}}.sym -o {{output}}"
  } else {
    strip_command = " && cp {{output}} {{output}}.sym && $objcopy --add-gnu-debuglink={{output}}.sym {{output}} && $strip --strip-all {{output}}"
  }

  toolchain(target_name) {
    object_subdir = "{{target_out_dir}}/{{label_name}}"
    lib_switch = "-l"
    lib_dir_switch = "-L"

    tool("cc") {
      depfile = "{{output}}.d"
      command = "$cc -fPIC -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_c}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC  {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    tool("cxx") {
      depfile = "{{output}}.d"
      command = "$cxx -fPIC -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_cc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC  {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    tool("objc") {
      depfile = "{{output}}.d"
      command = "$cc -fPIC -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_objc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC  {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    tool("objcxx") {
      depfile = "{{output}}.d"
      command = "$cxx -fPIC -MMD -MF $depfile {{defines}} {{include_dirs}} {{cflags}} {{cflags_objcc}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC  {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    tool("asm") {
      # For GCC we can just use the C compiler to compile assembly.
      depfile = "{{output}}.d"
      command = "$cc -MMD -MF $depfile {{defines}} {{include_dirs}} {{asmflags}} -c {{source}} -o {{output}}"
      depsformat = "gcc"
      description = "CC  {{output}}"
      outputs = [ "$object_subdir/{{source_name_part}}.o" ]
    }

    tool("alink") {
      rspfile = "{{output}}.rsp"
      rspfile_content = "{{inputs}}"
      if (is_mac) {
        rspfile_content = "{{inputs_newline}}"
        command = "rm -f \"{{output}}\" && libtool -static -o \"{{output}}\" -filelist \"$rspfile\""
      } else {
        rspfile_content = "{{inputs_newline}}"
        _combine = rebase_path("//.gnfiles/build/scripts/combine.py")
        if (host_os == "win") {
          command = "$python_path $_combine $ar \"{{output}}\" @\"$rspfile\""
        } else {
          command = "rm -f \"{{output}}\" && $python_path $_combine $ar \"{{output}}\" @\"$rspfile\""
        }
      }
      description = "AR  {{output}}"
      outputs = [ "{{output_dir}}/{{target_output_name}}{{output_extension}}" ]

      # Shared libraries go in the target out directory by default so we can
      # generate different targets with the same name and not have them collide.
      default_output_dir = "{{target_out_dir}}"
      default_output_extension = ".a"
      output_prefix = "lib"
    }

    tool("solink") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
      rspfile = sofile + ".rsp"
      pool = "//.gnfiles/build/toolchain:link_pool"

      if (is_mac) {
        command = "rm -f {{output}} {{output}}.sym && $ld -shared {{ldflags}} -o \"{{output}}\" @\"$rspfile\" {{solibs}} {{libs}} {{frameworks}}"
        rspfile_content = "{{inputs_newline}}"
      } else {
        command = "rm -f {{output}} {{output}}.sym && $ld -shared {{ldflags}} -o \"{{output}}\" -Wl,-soname=\"$soname\" -Wl,--start-group @\"$rspfile\" -Wl,--end-group"
        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix"
      }

      if (!is_debug) {
        # TODO(Wei): Enable this in the future. Currently, because we want to
        # have more information in the release build, such as the backtrace, so
        # disable the stripping in the release build. If we have more
        # confidence about the release build quality, we have to enable this.
        #
        # command += strip_command
      }

      description = "LD  {{output}}"
      if (is_mac) {
        default_output_extension = ".dylib"
      } else if (is_win) {
        default_output_extension = ".dll"
      } else {
        default_output_extension = ".so"
      }
      default_output_dir = "{{root_out_dir}}"
      output_prefix = "lib"
      restat = true

      # Tell GN about the output files. It will link to the sofile but use the
      # tocfile for dependency management.
      outputs = [ sofile ]
    }

    tool("solink_module") {
      soname = "{{target_output_name}}{{output_extension}}"  # e.g. "libfoo.so".
      sofile = "{{output_dir}}/$soname"  # Possibly including toolchain dir.
      rspfile = sofile + ".rsp"
      pool = "//.gnfiles/build/toolchain:link_pool"

      if (is_mac) {
        command = "rm -f {{output}} {{output}}.sym && $ld -shared {{ldflags}} -o \"{{output}}\" @\"$rspfile\" {{solibs}} {{libs}} {{frameworks}}"
        rspfile_content = "{{inputs_newline}}"
      } else {
        command = "rm -f {{output}} {{output}}.sym && $ld -shared {{ldflags}} -o \"{{output}}\" -Wl,-soname=\"$soname\" -Wl,--start-group @\"$rspfile\" -Wl,--end-group"
        rspfile_content = "-Wl,--whole-archive {{inputs}} {{solibs}} -Wl,--no-whole-archive $solink_libs_section_prefix {{libs}} $solink_libs_section_postfix"
      }

      if (!is_debug) {
        # TODO(Wei): Enable this in the future. Currently, because we want to
        # have more information in the release build, such as the backtrace, so
        # disable the stripping in the release build. If we have more
        # confidence about the release build quality, we have to enable this.
        #
        # command += strip_command
      }

      description = "LD  {{output}}"
      if (is_mac) {
        default_output_extension = ".dylib"
      } else if (is_win) {
        default_output_extension = ".dll"
      } else {
        default_output_extension = ".so"
      }
      default_output_dir = "{{root_out_dir}}"
      output_prefix = "lib"
      restat = true

      # Tell GN about the output files. It will link to the sofile but use the
      # tocfile for dependency management.
      outputs = [ sofile ]
    }

    tool("link") {
      exename = "{{target_output_name}}{{output_extension}}"
      outfile = "{{output_dir}}/$exename"
      rspfile = "$outfile.rsp"
      pool = "//.gnfiles/build/toolchain:link_pool"
      if (is_win) {
        default_output_extension = ".exe"
      } else {
        default_output_extension = ""
      }
      default_output_dir = "{{root_out_dir}}"

      if (is_mac) {
        command = "rm -f {{output}} {{output}}.sym && $ld {{ldflags}} -o \"{{output}}\" -filelist \"$rspfile\" {{solibs}} {{libs}} {{frameworks}}"
        rspfile_content = "{{inputs_newline}}"
      } else {
        command = "rm -f {{output}} {{output}}.sym && $ld {{ldflags}} -o \"{{output}}\" -Wl,--start-group @\"$rspfile\" -Wl,--end-group"
        rspfile_content = "-Wl,--no-whole-archive $inputs_section_prefix {{inputs}} {{solibs}} $libs_section_prefix {{libs}} $libs_section_postfix"
      }

      if (!is_debug) {
        # TODO(Wei): Enable this in the future. Currently, because we want to
        # have more information in the release build, such as the backtrace, so
        # disable the stripping in the release build. If we have more
        # confidence about the release build quality, we have to enable this.
        #
        # command += strip_command
      }

      description = "LD  {{output}}"
      outputs = [ outfile ]
    }

    # These two are really entirely generic, but have to be repeated in
    # each toolchain because GN doesn't allow a template to be used here.
    # See //build/toolchain/toolchain.gni for details.
    tool("stamp") {
      command = "touch \"{{output}}\""
      description = "GEN {{output}}"
    }

    tool("copy") {
      command = "cp -rf {{source}} {{output}}"
      description = "CP  {{source}} {{output}}"
    }

    tool("action") {
      pool = "//.gnfiles/build/toolchain:action_pool"
      description = "CC  {{output}}"
    }

    if (is_mac) {
      tool("copy_bundle_data") {
        # copy_command use hardlink if possible but this does not work with
        # directories. If source is a directory, instead use "pax" to create
        # the same tree structure using hardlinks to individual files (this
        # preserve symbolic links too) as recommended in the replies to the
        # question at http://serverfault.com/q/209888/43689 ("cp -al" isn't
        # available on macOS).
        #
        # According to the man page for pax, the commands to use to clone
        # olddir to newdir using pax are the following:
        #
        #   $ mkdir newdir
        #   $ cd olddir
        #   $ pax -rwl . ../newdir
        #
        # The _copydir command does exactly that but use an absolute path
        # constructed using shell variable $OLDPWD (automatically set when
        # cd is used) as computing the relative path is a bit complex and
        # using pwd would requires a sub-shell to be created.
        _copydir = "mkdir -p {{output}} && cd {{source}} && " +
                   "pax -rwl . \"\$OLDPWD\"/{{output}}"
        command = "rm -rf {{output}} && if [[ -d {{source}} ]]; then " +
                  _copydir + "; else cp -rf {{source}} {{output}}; fi"

        description = "COPY_BUNDLE_DATA {{source}} {{output}}"
      }
    }
  }
}

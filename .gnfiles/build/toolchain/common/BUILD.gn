#
# Copyright © 2024 Agora
# This file is part of TEN Framework, an open source project.
# Licensed under the Apache License, Version 2.0, with certain conditions.
# Refer to the "LICENSE" file in the root directory for more information.
#
import("//.gnfiles/build/platform/linux/feature.gni")

config("common") {
  defines = []
  libs = []

  if (is_win) {
    defines += [ "TARGET_OS_WIN" ]
  } else if (is_mac) {
    defines += [ "TARGET_OS_MAC" ]
  } else if (is_linux) {
    defines += [ "TARGET_OS_LINUX" ]
  }

  include_dirs = [
    "//",
    root_build_dir,
    root_gen_dir,
  ]

  if (!is_win) {
    cflags_cc = [ "-std=c++${cxx_standard}" ]
    cflags_objcc = [ "-std=c++${cxx_standard}" ]
    if (enable_c_extensions) {
      c_standard_style = "gnu"
    } else {
      c_standard_style = "c"
    }
    cflags_c = [ "-std=${c_standard_style}${c_standard}" ]
    cflags_objc = [ "-std=${c_standard_style}${c_standard}" ]

    if (is_clang) {
      cflags_cc += [ "-ftemplate-backtrace-limit=0" ]
    }
  } else {
    cflags_cc = [ "/std:c++${cxx_standard}" ]
  }
}

config("compiler_cpu_abi") {
  cflags = []
  cflags_c = []
  cflags_cc = []
  ldflags = []
  defines = []

  if (is_linux && !is_mac) {
    # CPU architecture. We may or may not be doing a cross compile now, so for
    # simplicity we always explicitly set the architecture.
    if (current_cpu == "x64") {
      cflags += [
        "-m64",
        "-march=x86-64",
      ]
      ldflags += [ "-m64" ]
    } else if (current_cpu == "x86") {
      cflags += [ "-m32" ]
      ldflags += [ "-m32" ]

      cflags += [
        "-msse2",
        "-mfpmath=sse",
        "-mmmx",
      ]
    } else if (current_cpu == "arm") {
      if (is_clang) {
        cflags += [
          "--target=arm-linux-gnueabihf",
          "-mthumb",
        ]
        ldflags += [ "--target=arm-linux-gnueabihf" ]
      }

      if (arm_float_abi == "") {
        if (current_os == "android") {
          arm_float_abi = "softfp"
        } else if (target_os == "android") {
          arm_float_abi = "softfp"
        } else if (current_os == "linux") {
          arm_float_abi = "hard"
        } else {
          arm_float_abi = "hard"
        }
      }

      cflags += [ "-mfloat-abi=$arm_float_abi" ]
    } else if (current_cpu == "arm64") {
      if (is_clang) {
        cflags += [ "--target=aarch64-linux-gnu" ]
        ldflags += [ "--target=aarch64-linux-gnu" ]
      }
    }
  }

  if (is_linux && target_cpu != host_cpu &&
      !(target_cpu == "x86" && host_cpu == "x64")) {
    # Needs additional sysroot
    sysroot = getenv("AG_SYSROOT")
    assert(sysroot != "", "Must provide AG_SYSROOT environment variable")
    cflags += [ "--sysroot=$sysroot" ]
    ldflags += [ "--sysroot=$sysroot" ]
  }

  asmflags = cflags
}

config("allow_undefined") {
  if (is_mac) {
    # '-undefined dynamic_lookup' is OSX-specific. Linux shared libraries
    # behave as if '-undefined dynamic_lookup' was enabled all the time.
    ldflags = [
      "-undefined",
      "dynamic_lookup",
    ]
  }
}

config("disallow_undefined") {
  # ios and mac default behave is '-undefined error'
  if (!enable_sanitizer && is_linux) {
    ldflags = [
      "-Wl,-z,defs",
      "-Wl,--as-needed",
    ]
  }
}

# Simply compile and link your program with -fsanitize=address flag.
# The AddressSanitizer run-time library should be linked to the final executable,
# so make sure to use clang (not ld) for the final link step. When linking shared
# libraries, the AddressSanitizer run-time is not linked, so -Wl,-z,defs may
# cause link errors (don’t use it with AddressSanitizer)
config("sanitizer_config") {
  cflags = [ "-fsanitize=address" ]
  ldflags = [ "-fsanitize=address" ]

  # '-fsanitize=leak' is only available in Linux. In Mac x86_64, the way to
  # enable LeakSanitizer is 'ASAN_OPTIONS=detect_leaks=1'.
  # ref: https://github.com/google/sanitizers/wiki/AddressSanitizerLeakSanitizer
  if (is_linux) {
    cflags += [ "-fsanitize=leak" ]
    ldflags += [ "-fsanitize=leak" ]

    if (liunx_asan_static_linking) {
      if (!is_clang) {
        # clang uses static linking mechanism for the asan mechanism by default,
        # so do not need to apply any command line options.
        ldflags += [ "-static-libasan" ]
      }
    } else {
      if (is_clang) {
        ldflags += [ "-shared-libsan" ]
      }
    }
  }

  if (is_clang) {
    cflags += [
      # The following two options are needed when we move more codes from TEN
      # runtime to common library. Ex: Moving transport module to common
      # library would cause ASAN ODR violation on some global variables in
      # the transport module. GCC uses private alias by default, but clang
      # needs to enable it manually.
      #
      # Please see https://github.com/google/sanitizers/issues/1017
      "-mllvm",
      "-asan-use-private-alias=1",
    ]
  }
}

config("compiler_timing") {
  cflags = []
  if (is_clang) {
    if (is_win) {
      cflags += [ "-Xclang" ]
    }
    cflags += [ "-ftime-report" ]
  } else if (is_win) {
    cflags += [
      # "Documented" here:
      # http://aras-p.info/blog/2017/10/23/Best-unknown-MSVC-flag-d2cgsummary/
      "/d2cgsummary",
    ]
  }
}

# Add default framework search path for ios and mac
if (is_mac) {
  config("framework_search_config") {
    cflags = [
      "-F",
      rebase_path("${root_out_dir}"),
    ]
    ldflags = [
      "-F",
      rebase_path("${root_out_dir}"),
    ]
  }
}
